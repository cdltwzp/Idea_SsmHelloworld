<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd ">

    <!-- 1.扫描controller包 -->
    <context:component-scan base-package="com.cneport.controller"/>

    <!-- 2.内部资源视图解析器，suffix为空，方便跟参数 url?id=xxx -->
    <bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/pages"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- 3.注解驱动 -->
    <mvc:annotation-driven/>

    <!-- 4.拦截器配置，根据自身业务配置，若无需求可不配置 -->
    <!-- 	<mvc:interceptors>
            <mvc:interceptor>
                <mvc:mapping path="/**"/>
                <bean class="com.huang.interceptor.LoginInterceptor"/>
            </mvc:interceptor>
        </mvc:interceptors> -->

    <!-- 5.文件上传解析器，最大能上传10M文件（1024*1024*10）-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="10485760"/>
    </bean>

    <!-- 由于前端控制前拦截条件是/，所以默认也拦截静态文件，所以这里要配置放行静态文件-->
    <!-- WEB 容器启动的时候会在上下文中定义一个 DefaultServletHttpRequestHandler，它
    会对DispatcherServlet的请求进行处理，如果该请求已经作了映射，那么会接着交给后台对应的处理程序，
    如果没有作映射，就交给 WEB 应用服务器默认的 Servlet 处理，从而找到对应的静态资源，-->
    <!--方法一-->
    <mvc:default-servlet-handler/>
    <!--方法二
    <mvc:resources mapping="/static/js/**" location="/static/js/**"/>
    <mvc:resources mapping="/static/css/**" location="/static/css/**"/>-->
</beans>
